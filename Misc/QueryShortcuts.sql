--Get all waiting sessions with detail info
SELECT req.session_id, blocking_session_id, ses.[host_name], DB_NAME(req.database_id) AS [database_name], ses.login_name, req.[status], req.command, req.start_time, req.cpu_time, req.total_elapsed_time / 1000.0 AS total_elapsed_time, req.command, req.wait_type, sqltext.[text] FROM sys.dm_exec_requests AS req CROSS APPLY sys.dm_exec_sql_text(req.[sql_handle]) AS sqltext JOIN sys.dm_exec_sessions AS ses ON ses.session_id = req.session_id WHERE req.wait_type IS NOT NULL;

--Get all user tables with some detail info
WITH result([object_id], [schema_id], table_type, row_count, partition_count) AS (SELECT t.[object_id], t.[schema_id], i.[type_desc], SUM(ps.row_count), COUNT(DISTINCT ps.partition_number) FROM sys.tables AS t JOIN sys.schemas AS s ON s.[schema_id] = t.[schema_id] JOIN sys.indexes AS i ON i.[object_id] = t.[object_id] JOIN sys.dm_db_partition_stats AS ps ON ps.[object_id] = i.[object_id] AND ps.index_id = i.index_id WHERE t.[type] = 'U' AND t.is_ms_shipped = 0 AND i.[type] IN (0, 1, 5) GROUP BY t.[object_id], t.[schema_id], i.[type_desc]) SELECT s.[name] AS [schema_name], t.[name] AS table_name, r.table_type, r.row_count, r.partition_count, t.is_replicated, t.is_published, t.is_merge_published, t.is_sync_tran_subscribed, t.is_tracked_by_cdc, t.is_filetable FROM result AS r JOIN sys.tables AS t ON t.[object_id] = r.[object_id] JOIN sys.schemas AS s ON s.[schema_id] = t.[schema_id] ORDER BY s.[name], t.[name];

--Get login details for the current database
SELECT m.name AS member_name, r.name AS role_name, r.is_fixed_role, m.type_desc AS member_type, m.authentication_type_desc AS member_auth_type FROM sys.database_role_members AS drm LEFT JOIN sys.database_principals AS m ON m.principal_id = drm.member_principal_id LEFT JOIN sys.database_principals AS r ON r.principal_id = drm.role_principal_id ORDER BY m.name, r.name;

--Get state information for all databases on the server
WITH database_size(database_id, size_in_mb_excluding_fs) AS (SELECT DISTINCT database_id, (SUM(size) OVER(PARTITION BY database_id) * 8) / 1024 FROM sys.master_files) SELECT d.[name] AS [database_name], create_date, [compatibility_level], l.[name] AS [owner], ds.size_in_mb_excluding_fs, collation_name, user_access_desc, d.is_read_only, is_auto_close_on, is_auto_shrink_on, d.state_desc, snapshot_isolation_state_desc, is_read_committed_snapshot_on, recovery_model_desc, page_verify_option_desc, is_auto_create_stats_on, is_auto_update_stats_on, is_query_store_on, is_subscribed, is_published FROM sys.databases AS d LEFT JOIN sys.syslogins AS l ON l.[sid] = d.owner_sid LEFT JOIN database_size AS ds ON ds.database_id = d.database_id ORDER BY d.[name];

--Get basic server/instance information
SELECT si.sqlserver_start_time, si.virtual_machine_type_desc, si.cpu_count, si.affinity_type_desc, CAST((sm.total_physical_memory_kb / 1048576.00) AS DECIMAL(7, 2)) AS total_physical_memory_gb, CAST((sm.available_physical_memory_kb / 1048576.00) AS DECIMAL(7, 2)) AS available_physical_memory_gb FROM sys.dm_os_sys_info AS si, sys.dm_os_sys_memory AS sm; SELECT [name], [value] FROM sys.configurations WHERE [name] IN (N'max server memory (MB)', N'min server memory (MB)', N'min memory per query (KB)');

--Create an alter statement that can be used to terminate all active connections to a database
SELECT N'USE [master]; ALTER DATABASE [' + DB_NAME() + N'] SET SINGLE_USER WITH ROLLBACK IMMEDIATE; ALTER DATABASE [' + DB_NAME() + N'] SET MULTI_USER;';
